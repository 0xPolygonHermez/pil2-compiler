airtemplate Runtime1(int N = 2**12) {
    int i = 10;
    container proof.`soporte_${i}` alias myalias {
        int containerCounter = 10;
        int _counter = 25;
    }
    container airgroup.`soporte_${i}` {
        int _counter = 100;
    }
    expr airgroup.value = 5;

    if (BITS == 12) {
        assert_eq(myalias._counter, 25);
        assert_eq(airgroup.value, 5);
        assert_eq(myalias.containerCounter, 10);
        assert_eq(proof.soporte_10.containerCounter, 10);
    } else {
        assert_eq(myalias._counter, 20); // 18 + inc + (+1) = 20
        // BUG: assert_eq(airgroup.value, 16);
        assert_eq(myalias.containerCounter, 13);
        assert_eq(proof.soporte_10.containerCounter, 13);
    }
    airgroup.value = 16;
    assert_eq(airgroup.value, 16);

    ++myalias.containerCounter;
    ++proof.`soporte_${i}`.containerCounter;
    ++proof.soporte_10.containerCounter;

    // proof.counter = 20;
    // air.counter = 20;

    myalias._counter = 18;

    // BUG: must be an error println(__AIRGROUP__, BITS, counter, proof.soporte_10._counter, airgroup.soporte_10.counter);
    ++airgroup.soporte_10._counter;

    proof.soporte_10._counter = proof.soporte_10._counter + 1;

    {
        use proof.`soporte_${i}`;
        _counter = _counter + 1;
    }

    value = value + 1;
    col witness a;
    a === 0;
}

airtemplate Runtime2(int N = 2**11) {
    int airgroup.counter;

    if (BITS == 11) {
        assert_eq(airgroup.counter, 0);
        assert_eq(counter, 0);
    } else {
        assert_eq(airgroup.counter, 10);
        assert_eq(counter, 10);
    }
    assert_eq(proof.soporte_10.containerCounter, 16);

    counter = 10;
    assert_eq(airgroup.counter, 10);
    assert_eq(counter, 10);

    col witness b;
    b === 0;
}

airgroup Runtime1 {
    Runtime1();
    Runtime1(2**13);
}

airgroup Runtime2 {
    Runtime2();
    Runtime2(2**13);
}
Runtime1();
Runtime1(2**13);
Runtime2();
Runtime2(2**13);