airtemplate ArrayInitAssign(int N = 2**4) {
    const int values[2] = [10, 20];

    println(values[0]);
    println(values[1]);

    const int [a,b] = [15, 25];

    println(a);
    println(b);

    col fixed LIST = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];

    for (int index = 0; index < N; ++index) {
        println(LIST[index]);
    }

    col fixed L2 = [10..25];

    for (int index = 0; index < N; ++index) {
        println(L2[index]);
    }

    {
        int _values[16] = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];

        for (int index = 0; index < length(_values); ++index) {
            println(`(int)_values[${index}]=${_values[index]}`);
        }
    }
    {
        expr _values[16] = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];

        for (int index = 0; index < length(_values); ++index) {
            println(`(expr)_values[${index}]=${_values[index]}`);
        }
    }

    // TODO: unify expression-list and sequences
    // expression_list items:
    //  expr
    //  ...expr         spreat
    //  expr...         padding
    //  ...             range
    //  expr:expr       repeats (value, column expression)  col fixed c = [a+b:65536,a-b:65536,..] where a,b are col fixed
    //  [expression_list]

    // {

    //     int _values[16] = [0..15];

    //     for (int index = 0; index < length(_values); ++index) {
    //         println(`(int)_values[${index}]=${_values[index]}`);
    //     }
    // }

    // TODO: multi-dimensional arrays initialization
    
    // {
    //      const int _values[2][3] = [[10, 20, 30], [40, 50, 60]];
    // 
    // }
    // {
    //      const int _values[2][3][2] = [[[10,11], [20,21], [30,31]], [[40,41], [50,51], [60,61]]];
    // 
    // }

}

airgroup ArrayInitAssign {
    ArrayInitAssign();
}