int processed = 0;

const int N_MAX = 32;
const int PSIX[6] = [2, 3, 5, 7, 11, 13];
const int MATRIX[2][8];
MATRIX[0] = [10,11,12,13,14,15,16,17];
MATRIX[1] = [20,21,22,23,24,25,26,27];


airtemplate Test1(int N = 2**13, int x1len = N_MAX) {

    function func1(expr x, int i3) {
        assert(defined(x) == 1);
        assert(defined(x1) == 1);
        assert(defined(x1[0]) == 1);
        assert(defined(x1[1]) == (x1len > 1 ? 1: 0));
        assert(defined(x2) == 0);
        assert(defined(PSIX) == 1);
        assert(defined(bc) == 1);
        assert(defined(tmp) == 0);
        assert(defined(MATRIX) == 1);
        assert(defined(MATRIX[0]) == 1);
        assert(defined(MATRIX[1]) == 1);
        assert(defined(MATRIX[2]) == 0);
        assert(defined(w1) == 1);
        assert(defined(w2) == 1);
        assert(defined(w3) == 0);
        assert(defined(f1) == 1);
        assert(defined(f2) == 1);
        assert(defined(f3) == 0);
        assert(defined(k1) == 0);
        assert(defined(k2) == 0);
        assert(defined(k3) == 0);
        assert(defined(air.gw1) == 1);
        assert(defined(air.gw2) == 1);
        assert(defined(air.gw3) == i3);
        assert(defined(air.gf1) == 1);
        assert(defined(air.gf2) == 1);
        assert(defined(air.gf3) == i3);
        func2(x,i3);
    }

    function func2(expr y, int i3) {
        assert(defined(y) == 1);
        assert(defined(x) == 0);
        assert(defined(x1) == 1);
        assert(defined(x1[0]) == 1);
        assert(defined(x1[1]) == (x1len > 1 ? 1: 0));
        assert(defined(PSIX) == 1);
        assert(defined(bc) == 1);
        assert(defined(tmp) == 0);
        assert(defined(MATRIX) == 1);
        assert(defined(MATRIX[0]) == 1);
        assert(defined(MATRIX[1]) == 1);
        assert(defined(MATRIX[2]) == 0);
        assert(defined(w1) == 1);
        assert(defined(w2) == 1);
        assert(defined(w3) == 0);
        assert(defined(k1) == 0);
        assert(defined(k2) == 0);
        assert(defined(k3) == 0);
        assert(defined(f1) == 1);
        assert(defined(f2) == 1);
        assert(defined(f3) == 0);
        assert(defined(gw1) == 1);
        assert(defined(gw2) == 1);
        assert(defined(gw3) == i3);
        assert(defined(gf1) == 1);
        assert(defined(gf2) == 1);
        assert(defined(gf3) == i3);
    }

    function func3(expr x[]) {
        assert(defined(x) == 1);
        assert(defined(x[0]) == 1);
        assert(defined(x[31]) == (x1len > 31 ? 1: 0));
        assert(defined(x[32]) == (x1len > 32 ? 1: 0));
        assert(defined(x[0][0]) == 0);
    }

    col witness x1[x1len];

    col witness w1,w2;
    col fixed f1 = [0,1...];
    col fixed f2 = [1,0...];

    col witness air.gw1, air.gw2;
    col fixed air.gf1 = [0..15]...;
    col fixed air.gf2 = [0,1,2,3]...; 

    int bc = 4;
    expr myfirstexpr = bc * x1[0]'2;

    assert(defined(N_MIN) == 0);
    assert(defined(N_MAX) == 1);
    assert(defined(PSIX) == 1);
    assert(defined(PSIX[0]) == 1);
    assert(defined(PSIX[0][0]) == 0);
    assert(defined(PSIX[5]) == 1);
    assert(defined(PSIX[1+5]) == 0);
    assert(defined(PSIX[bc]) == 1);
    assert(defined(MATRIX[1]) == 1);
    assert(defined(MATRIX[2]) == 0);
    assert(defined(MATRIX[1][0]) == 1);
    assert(defined(MATRIX[0][8]) == 0);
    assert(defined(MATRIX[1][8]) == 0);
    assert(defined(bc) == 1);
    assert(defined(myfirstexpr) == 1);
    assert(defined(_myfirstexpr) == 0);
    assert(defined(x1) == 1);
    assert(defined(x1[0]) == 1);
    assert(defined(x1[N_MAX-1]) == (N_MAX <= x1len ? 1 : 0));
    assert(defined(x1[N_MAX]) == (N_MAX < x1len ? 1 : 0));

    assert(defined(nondefined) == 0);
    assert(defined(tmp + 2) == 0);
    assert(defined(3) == 1);
    assert(defined(0) == 1);

    assert(defined(w1) == 1);
    assert(defined(w2) == 1);
    assert(defined(w3) == 0);
    assert(defined(f1) == 1);
    assert(defined(f2) == 1);
    assert(defined(f3) == 0);

    assert(defined(air.gw1) == 1);
    assert(defined(air.gw2) == 1);
    assert(defined(air.gw3) == 0);
    assert(defined(air.gf1) == 1);
    assert(defined(air.gf2) == 1);
    assert(defined(air.gf3) == 0);

    __func1(x1[0], 0);
    func1(x1[0], 0);

    col witness air.gw3;
    col fixed air.gf3 = [0,3]...;

    assert(defined(air.gw3) == 1);
    assert(defined(air.gf3) == 1);

    func1(x1[0], 1);
    func3(x1);
    processed = processed + 1;
}


function __func1(expr x, int i3) {
    assert(defined(x) == 1);
    assert(defined(x1) == 0);
    assert(defined(x2) == 0);
    assert(defined(PSIX) == 1);
    assert(defined(bc) == 0);
    assert(defined(tmp) == 0);
    assert(defined(MATRIX) == 1);
    assert(defined(MATRIX[0]) == 1);
    assert(defined(MATRIX[2]) == 0);
    assert(defined(w1) == 0);
    assert(defined(w2) == 0);
    assert(defined(w3) == 0);
    assert(defined(k1) == 0);
    assert(defined(k2) == 0);
    assert(defined(k3) == 0);
    assert(defined(f1) == 0);
    assert(defined(f2) == 0);
    assert(defined(f3) == 0);
    assert(defined(air.gw1) == 1);
    assert(defined(air.gw2) == 1);
    assert(defined(air.gw3) == i3);
    assert(defined(air.gf1) == 1);
    assert(defined(air.gf2) == 1);
    assert(defined(air.gf3) == i3);
    func2(x,i3);
}

airgroup BuiltIn {
    Test1();
    Test1(x1len: 1);
}

assert(processed == 2);
