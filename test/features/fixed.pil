const int P2_8 = 2**8;    
const int P2_9 = 2**9;    
const int P2_16 = 2**16;    
const int P2_17 = 2**17;
const int P2_18 = 2**18;
const int P2_19 = 2**19;

airtemplate BinaryTable(int N = 2**22) {
    
    col witness multiplicity;
    #pragma memory print
    #pragma memory m1 start
    #pragma timer t1 start
    col fixed A = [0..255]...;                        // Input A    (8 bits)

    col fixed B = [0:P2_8..255:P2_8]...;              // Input B    (8 bits)

    // col fixed _CIN = [[0:4..10:4]:4,[5:3..10:3]...];

    col fixed CIN = [[0:P2_16,1:P2_16]:(11*2),
                      0:(P2_17*4)]...;

    col fixed LAST = [[0:P2_17, 1:P2_17]:11,
                      [0:P2_16, 1:P2_16]:4]...;       // Last byte  (1 bits)

    col fixed USE_CARRY = [0:(P2_18*2),              // USE_CARRY(ADD,SUB) = 0
                          [0:P2_17, 1:P2_17]:9,      // USE_CARRY(LTU,LT,LEU,LE,EQ,MINU,MIN,MAXU,MAX) = LAST (i.e., only when LAST == 1)
                           0:(P2_17*4)]...;          // USE_CARRY(AND,OR,XOR,EXT_32) = 0

    col fixed OP = [2:P2_18..12:P2_18,
                    32:P2_17..35:P2_17]...;


    #pragma timer t1 end
    #pragma memory print

    #pragma fixed_dump A dump_A.bin byte 
    #pragma fixed_dump B dump_B.bin byte 
    #pragma fixed_dump CIN dump_CIN.bin byte 
    #pragma fixed_dump LAST dump_LAST.bin byte 
    #pragma fixed_dump USE_CARRY dump_USE_CARRY.bin byte 
    #pragma fixed_dump OP dump_OP.bin byte 

    #pragma timer t2 start
    col fixed C;                                      // Output C   (8 bits)
    col fixed COUT;                                   // CarryOut   (1 bits)
    col fixed FLAGS;
    // #pragma cache_fixed `tmp/binary_table.fixed.cache` C, COUT, FLAGS
    #pragma transpile
    for (int i = 0; i < N; i++) {
        int [plast, op, a, b, cin, c, cout] = [LAST[i], OP[i], A[i], B[i], CIN[i], 0, 0];
        switch (op) {
            case 0x02: // ADD,ADD_W
                c = (cin + a + b) & 0xFF;
                cout = (cin + a + b) >> 8;

            case 0x3: // SUB,SUB_W
                cout = (a - cin) >= b ? 0 : 1;
                c = 256 * cout + a - cin - b;

            case 0x04,0x05: // LTU,LTU_W,LT,LT_W
                if (a < b) {
                    cout = 1;
                    c = plast;
                } else if (a == b) {
                    cout = cin;
                    c = plast * cin;
                }

                // If the chunk is signed, then the result is the sign of a
                if (op == 0x05 && plast && (a & 0x80) != (b & 0x80)) {
                    c = (a & 0x80) ? 1 : 0;
                    cout = c;
                }

            case 0x06,0x07: // LEU,LEU_W,LE,LE_W
                if (a <= b) {
                    cout = 1;
                    c = plast;
                }
                if (op == 0x07 && plast && (a & 0x80) != (b & 0x80)) {
                    c = (a & 0x80) ? 1 : 0;
                    cout = c;
                }

            case 0x08: // EQ,EQ_W
                if (a == b && !cin) c = plast;
                else cout = 1;
                cout = plast ? (1 - cout) : cout;

            case 0x09,0x0a: // MINU,MINU_W,MIN,MIN_W
                if (a <= b) {
                    cout = 1;
                    c = plast ? a : b;
                } else {
                    c = b;
                }
                if (op == 0x0a && plast && (a & 0x80) != (b & 0x80)) {
                    c = (a & 0x80) ? a : b;
                    cout = (a & 0x80) ? 1 : 0;
                }

            case 0x0b,0x0c: // MAXU,MAXU_W,MAX,MAX_W
                if (a >= b) {
                    cout = 1;
                    c = plast ? a : b;
                } else {
                    c = b;
                }
                if (op == 0x0c && plast && (a & 0x80) != (b & 0x80)) {
                    c = (a & 0x80) ? b : a;
                    cout = (a & 0x80) ? 0 : 1;
                }

            case 0x20: // AND
                c = a & b;

            case 0x21: // OR
                c = a | b;

            case 0x22: // XOR
                c = a ^ b;

            case 0x23: // EXT_32
                c = (a & 0x80) ? 0xFF : 0x00;

            default:
                error(`Invalid operation ${op}`);
        }
        C[i] = c;
        COUT[i] = cout;
        FLAGS[i] = cout + 2 * USE_CARRY[i];
    }
    #pragma timer t2 end
    #pragma memory print
    #pragma memory m1 end

    #pragma fixed_dump C dump_C.bin byte 
    #pragma fixed_dump COUT dump_COUT.bin byte 
    #pragma fixed_dump FLAGS dump_FLAGS.bin byte 
}

airgroup Binary {
    BinaryTable();
}