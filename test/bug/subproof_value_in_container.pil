airtemplate AirA(int N = 2**16, int type = 0) {
    col witness a,b,c,d;

    container airgroup.mycontainer alias mc {
        airgroupval aggregate(sum) typeg;
    }
    container air.myair alias ma {
        col witness aa;
        col fixed AA = [1,2,3]...;
    }
    if (type == 0) {
        airgroupval aggregate(prod) type0;
        type0 === a * b + ma.aa * ma.AA;
        mc.typeg === a * c;
    } else {
        airgroupval aggregate(prod) type0;
        type0 === a * a + ma.aa * ma.AA;
        mc.typeg === a * c;
    }
}

airtemplate AirB(int N = 2**16) {
    col witness a,b;

    airgroupval aggregate(sum) typeb;
    typeb === a * b;
}

airgroup AirA {
    AirA(2**3, 0);
    AirA(2**4, 1);
}

airgroup AirB {
    AirB(2**3);
}

proofval pvalue;

AirB.typeb + AirA.type0 + pvalue === 23;