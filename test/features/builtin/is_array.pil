const int N_MAX = 32;
const int PSIX[6] = [2, 3, 5, 7, 11, 13];
const int MATRIX[2][8];
MATRIX[0] = [10,11,12,13,14,15,16,17];
MATRIX[1] = [20,21,22,23,24,25,26,27];

function func1(expr x) {
    assert(is_array(x) == 0);
    assert(is_array(x1) == 0);
    assert(is_array(PSIX) == 1);
    assert(is_array(bc) == 0);
    assert(is_array(tmp) == 0);
    assert(is_array(MATRIX) == 1);
    assert(is_array(MATRIX[0]) == 1);
    assert(is_array(MATRIX[0][0]) == 0);
    assert(is_array(MATRIX[2]) == 0);
    assert(is_array(w1) == 0);
    assert(is_array(w1[0]) == 0);
    assert(is_array(w2) == 0);
    assert(is_array(f1) == 0);
    assert(is_array(f1[0]) == 0);
    assert(is_array(gw1) == 0);
}
function func2(expr x[]) {
    assert(is_array(x) == 1);
    assert(is_array(x[0]) == 0);
    assert(is_array(x1) == 0);
}

airtemplate Test1(int N = 2**13) {

    col witness x1[N_MAX];

    col witness w1;
    col fixed f1 = [1,0...];


    int bc = 1;
    expr myfirstexpr = bc * x1[0]'2;

    assert(is_array(N_MIN) == 0);
    assert(is_array(N_MAX) == 0);
    assert(is_array(PSIX) == 1);
    assert(is_array(PSIX[0]) == 0);
    assert(is_array(PSIX[0][0]) == 0);
    assert(is_array(PSIX[5]) == 0);
    assert(is_array(PSIX[1+5]) == 0);
    assert(is_array(PSIX[bc]) == 0);
    assert(is_array(MATRIX) == 1);
    assert(is_array(MATRIX[0]) == 1);
    assert(is_array(MATRIX[bc]) == 1);
    assert(is_array(MATRIX[2]) == 0);
    assert(is_array(MATRIX[1][0]) == 0);
    assert(is_array(MATRIX[0][8]) == 0);
    assert(is_array(MATRIX[1][8]) == 0);
    assert(is_array(bc) == 0);
    assert(is_array(myfirstexpr) == 0);
    assert(is_array(_myfirstexpr) == 0);
    assert(is_array(x1) == 1);
    assert(is_array(x1[0]) == 0);
    assert(is_array(x1[N_MAX-1]) == 0);
    assert(is_array(x1[N_MAX]) == 0);

    func1(x1[0]);
    func2(x1);
}

airgroup BuiltIn {
    Test1();
}
